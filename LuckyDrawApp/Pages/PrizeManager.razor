@page "/prize-manager"
@using LuckyDrawApp.Models
@using LuckyDrawApp.Services
@inject IJSRuntime JSRuntime
@inject IndexedDBService IndexedDBService
@inject NavigationManager navigationManager

<div class="container mt-3">

  <h1 class="white-text">Manage Prizes</h1>
  <div class="container mt-3">
    <div class="row">
      <div class="col-md-8 justify-content-end">
        <div class="input-group mb-3">
          <input type="text" class="form-control" placeholder="Enter new prize name" @bind="newPrizeName">
          <select class="form-control" @bind="selectedImageName">
            <option value="-1">Select Image</option>
            @foreach (var image in galleryImages)
            {
              <option value="@image.FileName">@image.FileName</option>
            }
          </select>

          <div class="input-group-append">
            <button class="btn golden-button" @onclick="AddNewPrize">Add Prize</button>
          </div>
        </div>

        @if (!string.IsNullOrEmpty(storeClearedMessage))
        {
          <div class="alert alert-success mb-4">@storeClearedMessage</div>
        }

        @* <div class="mb-3">
          <button @onclick="ClearStoreAsync" class="btn btn-warning">Clear All Entry Records</button>
        </div> *@

        <div class="mb-3">
          <button @onclick="DeleteDatabaseAsync" class="btn btn-danger">Delete Database</button>
        </div>

        <div>
          <button type="button" class="btn btn-secondary" @onclick="@(()=>navigationManager.NavigateTo("/"))">Back to Dashboard</button>
        </div>
      </div>

      <div class="col-md-4">
        <h4 class="gold-text">List of Prizes</h4>
        <ul class="list-group">
          @foreach (var prize in _prizes)
          {
            <li class="list-group-item">
              @if (prize.ImageData != null)
              {
                <img src="data:image/png;base64,@Convert.ToBase64String(prize.ImageData)" style="width: 50px; height: 50px;"/>
              }
              else
              {
                <img src="./images/star-circle.svg" style="width: 50px; height: 50px;" />
              }
              <span class="px-3">@prize.Name</span>
              @* <select @onchange="(e) => SelectImageForPrize(prize, int.Parse((string)e.Value))">
                <option value="-1">Select Image</option>
                @foreach (var image in galleryImages)
                {
                  <option value="@image.Id">@image.FileName</option>
                }
              </select> *@
              
            </li>
          }
        </ul>
      </div>
    </div>


  </div>
</div>



<style>
  .golden-button {
    background-image: -webkit-gradient(linear, left bottom, left top, from(#f4ba2e), to(#fea036));
    background-image: -o-linear-gradient(bottom, #f4ba2e 0%, #fea036 100%);
    background-image: linear-gradient(0deg, #f4ba2e 0%, #fea036 100%);
    border-style: solid;
    border-width: 1px;
    border-color: #fea036;
    border-radius: 5px;
    -webkit-box-shadow: 0px 3px 2px 0px rgba(32, 29, 30, 0.25);
    box-shadow: 0px 3px 2px 0px rgba(32, 29, 30, 0.25);
    padding: 5px 15px;
    font-size: 16px;
    font-weight: 600;
    line-height: 26px;
    color: #B24A00;
    display: inline-block;
    cursor: pointer;
    width: auto;
    height: auto;
  }

    .golden-button:hover {
      background: linear-gradient(45deg, #FFC107, #fea036);
      color: floralwhite;
      font-weight: 700;
      box-shadow: 0px 0px 10px rgba(255, 215, 0, 0.5);
    }

  .white-text {
    color: floralwhite;
  }

  .gold-text {
    color: #ffd700;
    text-shadow: 0px 3px 2px 0px rgba(32, 29, 30, 0.25);
  }

  .background-selector {
    position: fixed;
    bottom: 20px;
    right: 20px;
    display: flex;
    align-items: center;
    gap: 5px;
    background-color: #f9f9f9;
    padding: 10px;
    border-radius: 5px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    z-index: 1000;
  }


    .background-selector i {
        font-size: 18px;
        color: #333;
    }
</style>


@code {
  private string selectedBgImageName = "";

  private string newPrizeName;
  private string selectedImageName = "";
  private List<PrizeBase> _prizes = new List<PrizeBase>();
  private List<GalleryBase> galleryImages = new List<GalleryBase>();

  private bool _isStoreCleared = false;
  private string storeClearedMessage = "";

  private bool _isDatabaseDeleted = false;

  protected override async Task OnInitializedAsync()
  {
    // var db = await IndexedDBService.OpenDb("MyDatabase");
    await IndexedDBService.CreatePrizeDbAsync("PrizeDatabase");
    await IndexedDBService.CreateGalleryDbAsync("GalleryDatabase");
    _prizes = (await IndexedDBService.GetAllItemsAsync<List<PrizeBase>>("PrizeDatabase", "Prize"));
      galleryImages = (await IndexedDBService.GetAllItemsAsync<List<GalleryBase>>("GalleryDatabase", "Gallery"));

    // load a previously selected image from local storage
    var savedImageName = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "backgroundImageId");
    if (savedImageName != null)
    {
      selectedBgImageName = savedImageName;
      SetBodyBackground(selectedBgImageName);
    }
  }

  private void SetBodyBackground(string imageName)
  {
    var selectedImage = galleryImages.FirstOrDefault(img => img.FileName == imageName);
    if (selectedImage != null)
    {
      var imageDataUrl = $"data:image/png;base64,{Convert.ToBase64String(selectedImage.ImageData)}";
      JSRuntime.InvokeVoidAsync("setBodyBackground", imageDataUrl);
    }
  }
  // private async Task AddNewPrize()
  // {
  //   if (!string.IsNullOrWhiteSpace(newPrizeName) && !_prizes.Any(p => p.Name.Equals(newPrizeName, StringComparison.OrdinalIgnoreCase)))
  //   {
  //     var newPrize = new PrizeBase { Name = newPrizeName };

  //     _prizes.Add(newPrize);

  //     await IndexedDBService.AddItemAsync("PrizeDatabase", "Prize", newPrize);
  //     newPrizeName = "";
  //     StateHasChanged();
  //   }
  // }

  private async Task AddNewPrize()
  {
    if (!string.IsNullOrWhiteSpace(newPrizeName) && !_prizes.Any(p => p.Name.Equals(newPrizeName, StringComparison.OrdinalIgnoreCase)))
    {
      var newPrize = new PrizeBase { Name = newPrizeName };

      // Find the selected image
      var selectedImage = galleryImages.FirstOrDefault(i => i.FileName == selectedImageName);
      if (selectedImage != null)
      {
        newPrize.ImageData = selectedImage.ImageData;
      }

      _prizes.Add(newPrize);

      await IndexedDBService.AddItemAsync("PrizeDatabase", "Prize", newPrize);
      newPrizeName = "";
      selectedImageName = "";
      StateHasChanged();
    }
  }

  // private async Task SelectImageForPrize(Prize prize, int imageId)
  // {
  //   var selectedImage = galleryImages.FirstOrDefault(i => i.Id == imageId);
  //   if (selectedImage != null)
  //   {
  //     prize.ImageData = selectedImage.ImageData;
  //     await IndexedDBService.UpdateItemAsync("PrizeDatabase", "Prize", prize);
  //   }
  // }

  // private async Task ClearStoreAsync()
  // {
  //   try
  //   {
  //     var result = await IndexedDBService.ClearStoreAsync("PrizeDatabase", "Prize");
  //     Console.WriteLine(result);

  //     StateHasChanged();
  //     _isStoreCleared = true;
  //     if (_isStoreCleared == true)
  //     {
  //       _prizes.Clear();
  //       storeClearedMessage = "All records has been cleared";
  //     }
  //     StateHasChanged();
  //     _isStoreCleared = false;
  //     await Task.Delay(3000);

  //     // Clear the message and update UI
  //     storeClearedMessage = "";
  //     StateHasChanged();
  //   }
  //   catch (Exception ex)
  //   {
  //     Console.Error.WriteLine("Failed to clear store: " + ex.Message);
  //     storeClearedMessage = "Failed to clear all records";
  //     StateHasChanged(); // Update UI to show error message

  //     // Optionally clear the message after a delay
  //     await Task.Delay(3000);
  //     storeClearedMessage = "";
  //     StateHasChanged();
  //   }
  // }

  private async Task DeleteDatabaseAsync()
  {
    try
    {
      var result = await IndexedDBService.DeleteDatabaseAsync("PrizeDatabase");
      Console.WriteLine(result);
      StateHasChanged();
      _isDatabaseDeleted = true;

      _prizes.Clear();
      StateHasChanged();
      _isDatabaseDeleted = false;
      await JSRuntime.InvokeVoidAsync("location.reload");
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine("Failed to delete database: " + ex.Message);
      _prizes.Clear();
      await JSRuntime.InvokeVoidAsync("location.reload");
    }
  }
}
